// Code generated by protoc-gen-go. DO NOT EDIT.
// source: btc.proto

package messages

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BTCCoin int32

const (
	BTCCoin_BTC  BTCCoin = 0
	BTCCoin_TBTC BTCCoin = 1
	BTCCoin_LTC  BTCCoin = 2
	BTCCoin_TLTC BTCCoin = 3
)

var BTCCoin_name = map[int32]string{
	0: "BTC",
	1: "TBTC",
	2: "LTC",
	3: "TLTC",
}

var BTCCoin_value = map[string]int32{
	"BTC":  0,
	"TBTC": 1,
	"LTC":  2,
	"TLTC": 3,
}

func (x BTCCoin) String() string {
	return proto.EnumName(BTCCoin_name, int32(x))
}

func (BTCCoin) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0}
}

type BTCOutputType int32

const (
	BTCOutputType_UNKNOWN BTCOutputType = 0
	BTCOutputType_P2PKH   BTCOutputType = 1
	BTCOutputType_P2SH    BTCOutputType = 2
	BTCOutputType_P2WPKH  BTCOutputType = 3
	BTCOutputType_P2WSH   BTCOutputType = 4
	BTCOutputType_P2TR    BTCOutputType = 5
)

var BTCOutputType_name = map[int32]string{
	0: "UNKNOWN",
	1: "P2PKH",
	2: "P2SH",
	3: "P2WPKH",
	4: "P2WSH",
	5: "P2TR",
}

var BTCOutputType_value = map[string]int32{
	"UNKNOWN": 0,
	"P2PKH":   1,
	"P2SH":    2,
	"P2WPKH":  3,
	"P2WSH":   4,
	"P2TR":    5,
}

func (x BTCOutputType) String() string {
	return proto.EnumName(BTCOutputType_name, int32(x))
}

func (BTCOutputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{1}
}

// SimpleType is a "simple" script: one public key, no additional inputs.
type BTCScriptConfig_SimpleType int32

const (
	BTCScriptConfig_P2WPKH_P2SH BTCScriptConfig_SimpleType = 0
	BTCScriptConfig_P2WPKH      BTCScriptConfig_SimpleType = 1
)

var BTCScriptConfig_SimpleType_name = map[int32]string{
	0: "P2WPKH_P2SH",
	1: "P2WPKH",
}

var BTCScriptConfig_SimpleType_value = map[string]int32{
	"P2WPKH_P2SH": 0,
	"P2WPKH":      1,
}

func (x BTCScriptConfig_SimpleType) String() string {
	return proto.EnumName(BTCScriptConfig_SimpleType_name, int32(x))
}

func (BTCScriptConfig_SimpleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0, 0}
}

type BTCScriptConfig_Multisig_ScriptType int32

const (
	BTCScriptConfig_Multisig_P2WSH      BTCScriptConfig_Multisig_ScriptType = 0
	BTCScriptConfig_Multisig_P2WSH_P2SH BTCScriptConfig_Multisig_ScriptType = 1
)

var BTCScriptConfig_Multisig_ScriptType_name = map[int32]string{
	0: "P2WSH",
	1: "P2WSH_P2SH",
}

var BTCScriptConfig_Multisig_ScriptType_value = map[string]int32{
	"P2WSH":      0,
	"P2WSH_P2SH": 1,
}

func (x BTCScriptConfig_Multisig_ScriptType) String() string {
	return proto.EnumName(BTCScriptConfig_Multisig_ScriptType_name, int32(x))
}

func (BTCScriptConfig_Multisig_ScriptType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0, 0, 0}
}

type BTCPubRequest_XPubType int32

const (
	BTCPubRequest_TPUB         BTCPubRequest_XPubType = 0
	BTCPubRequest_XPUB         BTCPubRequest_XPubType = 1
	BTCPubRequest_YPUB         BTCPubRequest_XPubType = 2
	BTCPubRequest_ZPUB         BTCPubRequest_XPubType = 3
	BTCPubRequest_VPUB         BTCPubRequest_XPubType = 4
	BTCPubRequest_UPUB         BTCPubRequest_XPubType = 5
	BTCPubRequest_CAPITAL_VPUB BTCPubRequest_XPubType = 6
	BTCPubRequest_CAPITAL_ZPUB BTCPubRequest_XPubType = 7
	BTCPubRequest_CAPITAL_UPUB BTCPubRequest_XPubType = 8
	BTCPubRequest_CAPITAL_YPUB BTCPubRequest_XPubType = 9
)

var BTCPubRequest_XPubType_name = map[int32]string{
	0: "TPUB",
	1: "XPUB",
	2: "YPUB",
	3: "ZPUB",
	4: "VPUB",
	5: "UPUB",
	6: "CAPITAL_VPUB",
	7: "CAPITAL_ZPUB",
	8: "CAPITAL_UPUB",
	9: "CAPITAL_YPUB",
}

var BTCPubRequest_XPubType_value = map[string]int32{
	"TPUB":         0,
	"XPUB":         1,
	"YPUB":         2,
	"ZPUB":         3,
	"VPUB":         4,
	"UPUB":         5,
	"CAPITAL_VPUB": 6,
	"CAPITAL_ZPUB": 7,
	"CAPITAL_UPUB": 8,
	"CAPITAL_YPUB": 9,
}

func (x BTCPubRequest_XPubType) String() string {
	return proto.EnumName(BTCPubRequest_XPubType_name, int32(x))
}

func (BTCPubRequest_XPubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{1, 0}
}

type BTCSignNextResponse_Type int32

const (
	BTCSignNextResponse_INPUT  BTCSignNextResponse_Type = 0
	BTCSignNextResponse_OUTPUT BTCSignNextResponse_Type = 1
	BTCSignNextResponse_DONE   BTCSignNextResponse_Type = 2
	// For the previous transaction at input `index`.
	BTCSignNextResponse_PREVTX_INIT   BTCSignNextResponse_Type = 3
	BTCSignNextResponse_PREVTX_INPUT  BTCSignNextResponse_Type = 4
	BTCSignNextResponse_PREVTX_OUTPUT BTCSignNextResponse_Type = 5
	BTCSignNextResponse_HOST_NONCE    BTCSignNextResponse_Type = 6
)

var BTCSignNextResponse_Type_name = map[int32]string{
	0: "INPUT",
	1: "OUTPUT",
	2: "DONE",
	3: "PREVTX_INIT",
	4: "PREVTX_INPUT",
	5: "PREVTX_OUTPUT",
	6: "HOST_NONCE",
}

var BTCSignNextResponse_Type_value = map[string]int32{
	"INPUT":         0,
	"OUTPUT":        1,
	"DONE":          2,
	"PREVTX_INIT":   3,
	"PREVTX_INPUT":  4,
	"PREVTX_OUTPUT": 5,
	"HOST_NONCE":    6,
}

func (x BTCSignNextResponse_Type) String() string {
	return proto.EnumName(BTCSignNextResponse_Type_name, int32(x))
}

func (BTCSignNextResponse_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{4, 0}
}

type BTCRegisterScriptConfigRequest_XPubType int32

const (
	// Automatically choose to match Electrum's xpub format (e.g. Zpub/Vpub for p2wsh multisig mainnet/testnet).
	BTCRegisterScriptConfigRequest_AUTO_ELECTRUM BTCRegisterScriptConfigRequest_XPubType = 0
	// Always xpub for mainnets, tpub for testnets.
	BTCRegisterScriptConfigRequest_AUTO_XPUB_TPUB BTCRegisterScriptConfigRequest_XPubType = 1
)

var BTCRegisterScriptConfigRequest_XPubType_name = map[int32]string{
	0: "AUTO_ELECTRUM",
	1: "AUTO_XPUB_TPUB",
}

var BTCRegisterScriptConfigRequest_XPubType_value = map[string]int32{
	"AUTO_ELECTRUM":  0,
	"AUTO_XPUB_TPUB": 1,
}

func (x BTCRegisterScriptConfigRequest_XPubType) String() string {
	return proto.EnumName(BTCRegisterScriptConfigRequest_XPubType_name, int32(x))
}

func (BTCRegisterScriptConfigRequest_XPubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{11, 0}
}

type BTCScriptConfig struct {
	// Types that are valid to be assigned to Config:
	//	*BTCScriptConfig_SimpleType_
	//	*BTCScriptConfig_Multisig_
	Config               isBTCScriptConfig_Config `protobuf_oneof:"config"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BTCScriptConfig) Reset()         { *m = BTCScriptConfig{} }
func (m *BTCScriptConfig) String() string { return proto.CompactTextString(m) }
func (*BTCScriptConfig) ProtoMessage()    {}
func (*BTCScriptConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0}
}

func (m *BTCScriptConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCScriptConfig.Unmarshal(m, b)
}
func (m *BTCScriptConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCScriptConfig.Marshal(b, m, deterministic)
}
func (m *BTCScriptConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCScriptConfig.Merge(m, src)
}
func (m *BTCScriptConfig) XXX_Size() int {
	return xxx_messageInfo_BTCScriptConfig.Size(m)
}
func (m *BTCScriptConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCScriptConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BTCScriptConfig proto.InternalMessageInfo

type isBTCScriptConfig_Config interface {
	isBTCScriptConfig_Config()
}

type BTCScriptConfig_SimpleType_ struct {
	SimpleType BTCScriptConfig_SimpleType `protobuf:"varint,1,opt,name=simple_type,json=simpleType,proto3,enum=shiftcrypto.bitbox02.BTCScriptConfig_SimpleType,oneof"`
}

type BTCScriptConfig_Multisig_ struct {
	Multisig *BTCScriptConfig_Multisig `protobuf:"bytes,2,opt,name=multisig,proto3,oneof"`
}

func (*BTCScriptConfig_SimpleType_) isBTCScriptConfig_Config() {}

func (*BTCScriptConfig_Multisig_) isBTCScriptConfig_Config() {}

func (m *BTCScriptConfig) GetConfig() isBTCScriptConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *BTCScriptConfig) GetSimpleType() BTCScriptConfig_SimpleType {
	if x, ok := m.GetConfig().(*BTCScriptConfig_SimpleType_); ok {
		return x.SimpleType
	}
	return BTCScriptConfig_P2WPKH_P2SH
}

func (m *BTCScriptConfig) GetMultisig() *BTCScriptConfig_Multisig {
	if x, ok := m.GetConfig().(*BTCScriptConfig_Multisig_); ok {
		return x.Multisig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BTCScriptConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BTCScriptConfig_SimpleType_)(nil),
		(*BTCScriptConfig_Multisig_)(nil),
	}
}

type BTCScriptConfig_Multisig struct {
	Threshold uint32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// xpubs are acount-level xpubs. Addresses are going to be derived from it using: m/<change>/<receive>.
	// The number of xpubs defines the number of cosigners.
	Xpubs []*XPub `protobuf:"bytes,2,rep,name=xpubs,proto3" json:"xpubs,omitempty"`
	// Index to the xpub of our keystore in xpubs. The keypath to it is provided via
	// BTCPubRequest/BTCSignInit.
	OurXpubIndex         uint32                              `protobuf:"varint,3,opt,name=our_xpub_index,json=ourXpubIndex,proto3" json:"our_xpub_index,omitempty"`
	ScriptType           BTCScriptConfig_Multisig_ScriptType `protobuf:"varint,4,opt,name=script_type,json=scriptType,proto3,enum=shiftcrypto.bitbox02.BTCScriptConfig_Multisig_ScriptType" json:"script_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *BTCScriptConfig_Multisig) Reset()         { *m = BTCScriptConfig_Multisig{} }
func (m *BTCScriptConfig_Multisig) String() string { return proto.CompactTextString(m) }
func (*BTCScriptConfig_Multisig) ProtoMessage()    {}
func (*BTCScriptConfig_Multisig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0, 0}
}

func (m *BTCScriptConfig_Multisig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCScriptConfig_Multisig.Unmarshal(m, b)
}
func (m *BTCScriptConfig_Multisig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCScriptConfig_Multisig.Marshal(b, m, deterministic)
}
func (m *BTCScriptConfig_Multisig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCScriptConfig_Multisig.Merge(m, src)
}
func (m *BTCScriptConfig_Multisig) XXX_Size() int {
	return xxx_messageInfo_BTCScriptConfig_Multisig.Size(m)
}
func (m *BTCScriptConfig_Multisig) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCScriptConfig_Multisig.DiscardUnknown(m)
}

var xxx_messageInfo_BTCScriptConfig_Multisig proto.InternalMessageInfo

func (m *BTCScriptConfig_Multisig) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *BTCScriptConfig_Multisig) GetXpubs() []*XPub {
	if m != nil {
		return m.Xpubs
	}
	return nil
}

func (m *BTCScriptConfig_Multisig) GetOurXpubIndex() uint32 {
	if m != nil {
		return m.OurXpubIndex
	}
	return 0
}

func (m *BTCScriptConfig_Multisig) GetScriptType() BTCScriptConfig_Multisig_ScriptType {
	if m != nil {
		return m.ScriptType
	}
	return BTCScriptConfig_Multisig_P2WSH
}

type BTCPubRequest struct {
	Coin    BTCCoin  `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.BTCCoin" json:"coin,omitempty"`
	Keypath []uint32 `protobuf:"varint,2,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	// Types that are valid to be assigned to Output:
	//	*BTCPubRequest_XpubType
	//	*BTCPubRequest_ScriptConfig
	Output               isBTCPubRequest_Output `protobuf_oneof:"output"`
	Display              bool                   `protobuf:"varint,5,opt,name=display,proto3" json:"display,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BTCPubRequest) Reset()         { *m = BTCPubRequest{} }
func (m *BTCPubRequest) String() string { return proto.CompactTextString(m) }
func (*BTCPubRequest) ProtoMessage()    {}
func (*BTCPubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{1}
}

func (m *BTCPubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCPubRequest.Unmarshal(m, b)
}
func (m *BTCPubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCPubRequest.Marshal(b, m, deterministic)
}
func (m *BTCPubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCPubRequest.Merge(m, src)
}
func (m *BTCPubRequest) XXX_Size() int {
	return xxx_messageInfo_BTCPubRequest.Size(m)
}
func (m *BTCPubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCPubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCPubRequest proto.InternalMessageInfo

func (m *BTCPubRequest) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCPubRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

type isBTCPubRequest_Output interface {
	isBTCPubRequest_Output()
}

type BTCPubRequest_XpubType struct {
	XpubType BTCPubRequest_XPubType `protobuf:"varint,3,opt,name=xpub_type,json=xpubType,proto3,enum=shiftcrypto.bitbox02.BTCPubRequest_XPubType,oneof"`
}

type BTCPubRequest_ScriptConfig struct {
	ScriptConfig *BTCScriptConfig `protobuf:"bytes,4,opt,name=script_config,json=scriptConfig,proto3,oneof"`
}

func (*BTCPubRequest_XpubType) isBTCPubRequest_Output() {}

func (*BTCPubRequest_ScriptConfig) isBTCPubRequest_Output() {}

func (m *BTCPubRequest) GetOutput() isBTCPubRequest_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *BTCPubRequest) GetXpubType() BTCPubRequest_XPubType {
	if x, ok := m.GetOutput().(*BTCPubRequest_XpubType); ok {
		return x.XpubType
	}
	return BTCPubRequest_TPUB
}

func (m *BTCPubRequest) GetScriptConfig() *BTCScriptConfig {
	if x, ok := m.GetOutput().(*BTCPubRequest_ScriptConfig); ok {
		return x.ScriptConfig
	}
	return nil
}

func (m *BTCPubRequest) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BTCPubRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BTCPubRequest_XpubType)(nil),
		(*BTCPubRequest_ScriptConfig)(nil),
	}
}

type BTCScriptConfigWithKeypath struct {
	ScriptConfig         *BTCScriptConfig `protobuf:"bytes,2,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
	Keypath              []uint32         `protobuf:"varint,3,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BTCScriptConfigWithKeypath) Reset()         { *m = BTCScriptConfigWithKeypath{} }
func (m *BTCScriptConfigWithKeypath) String() string { return proto.CompactTextString(m) }
func (*BTCScriptConfigWithKeypath) ProtoMessage()    {}
func (*BTCScriptConfigWithKeypath) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{2}
}

func (m *BTCScriptConfigWithKeypath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCScriptConfigWithKeypath.Unmarshal(m, b)
}
func (m *BTCScriptConfigWithKeypath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCScriptConfigWithKeypath.Marshal(b, m, deterministic)
}
func (m *BTCScriptConfigWithKeypath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCScriptConfigWithKeypath.Merge(m, src)
}
func (m *BTCScriptConfigWithKeypath) XXX_Size() int {
	return xxx_messageInfo_BTCScriptConfigWithKeypath.Size(m)
}
func (m *BTCScriptConfigWithKeypath) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCScriptConfigWithKeypath.DiscardUnknown(m)
}

var xxx_messageInfo_BTCScriptConfigWithKeypath proto.InternalMessageInfo

func (m *BTCScriptConfigWithKeypath) GetScriptConfig() *BTCScriptConfig {
	if m != nil {
		return m.ScriptConfig
	}
	return nil
}

func (m *BTCScriptConfigWithKeypath) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

type BTCSignInitRequest struct {
	Coin BTCCoin `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.BTCCoin" json:"coin,omitempty"`
	// used script configs in inputs and changes
	ScriptConfigs        []*BTCScriptConfigWithKeypath `protobuf:"bytes,2,rep,name=script_configs,json=scriptConfigs,proto3" json:"script_configs,omitempty"`
	Version              uint32                        `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	NumInputs            uint32                        `protobuf:"varint,5,opt,name=num_inputs,json=numInputs,proto3" json:"num_inputs,omitempty"`
	NumOutputs           uint32                        `protobuf:"varint,6,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	Locktime             uint32                        `protobuf:"varint,7,opt,name=locktime,proto3" json:"locktime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *BTCSignInitRequest) Reset()         { *m = BTCSignInitRequest{} }
func (m *BTCSignInitRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignInitRequest) ProtoMessage()    {}
func (*BTCSignInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{3}
}

func (m *BTCSignInitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignInitRequest.Unmarshal(m, b)
}
func (m *BTCSignInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignInitRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignInitRequest.Merge(m, src)
}
func (m *BTCSignInitRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignInitRequest.Size(m)
}
func (m *BTCSignInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignInitRequest proto.InternalMessageInfo

func (m *BTCSignInitRequest) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCSignInitRequest) GetScriptConfigs() []*BTCScriptConfigWithKeypath {
	if m != nil {
		return m.ScriptConfigs
	}
	return nil
}

func (m *BTCSignInitRequest) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BTCSignInitRequest) GetNumInputs() uint32 {
	if m != nil {
		return m.NumInputs
	}
	return 0
}

func (m *BTCSignInitRequest) GetNumOutputs() uint32 {
	if m != nil {
		return m.NumOutputs
	}
	return 0
}

func (m *BTCSignInitRequest) GetLocktime() uint32 {
	if m != nil {
		return m.Locktime
	}
	return 0
}

type BTCSignNextResponse struct {
	Type BTCSignNextResponse_Type `protobuf:"varint,1,opt,name=type,proto3,enum=shiftcrypto.bitbox02.BTCSignNextResponse_Type" json:"type,omitempty"`
	// index of the current input or output
	Index        uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	HasSignature bool   `protobuf:"varint,3,opt,name=has_signature,json=hasSignature,proto3" json:"has_signature,omitempty"`
	// 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// Previous tx's input/output index in case of PREV_INPUT or PREV_OUTPUT, for the input at `index`.
	PrevIndex                  uint32                      `protobuf:"varint,5,opt,name=prev_index,json=prevIndex,proto3" json:"prev_index,omitempty"`
	AntiKleptoSignerCommitment *AntiKleptoSignerCommitment `protobuf:"bytes,6,opt,name=anti_klepto_signer_commitment,json=antiKleptoSignerCommitment,proto3" json:"anti_klepto_signer_commitment,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                    `json:"-"`
	XXX_unrecognized           []byte                      `json:"-"`
	XXX_sizecache              int32                       `json:"-"`
}

func (m *BTCSignNextResponse) Reset()         { *m = BTCSignNextResponse{} }
func (m *BTCSignNextResponse) String() string { return proto.CompactTextString(m) }
func (*BTCSignNextResponse) ProtoMessage()    {}
func (*BTCSignNextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{4}
}

func (m *BTCSignNextResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignNextResponse.Unmarshal(m, b)
}
func (m *BTCSignNextResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignNextResponse.Marshal(b, m, deterministic)
}
func (m *BTCSignNextResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignNextResponse.Merge(m, src)
}
func (m *BTCSignNextResponse) XXX_Size() int {
	return xxx_messageInfo_BTCSignNextResponse.Size(m)
}
func (m *BTCSignNextResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignNextResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignNextResponse proto.InternalMessageInfo

func (m *BTCSignNextResponse) GetType() BTCSignNextResponse_Type {
	if m != nil {
		return m.Type
	}
	return BTCSignNextResponse_INPUT
}

func (m *BTCSignNextResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BTCSignNextResponse) GetHasSignature() bool {
	if m != nil {
		return m.HasSignature
	}
	return false
}

func (m *BTCSignNextResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BTCSignNextResponse) GetPrevIndex() uint32 {
	if m != nil {
		return m.PrevIndex
	}
	return 0
}

func (m *BTCSignNextResponse) GetAntiKleptoSignerCommitment() *AntiKleptoSignerCommitment {
	if m != nil {
		return m.AntiKleptoSignerCommitment
	}
	return nil
}

type BTCSignInputRequest struct {
	PrevOutHash  []byte   `protobuf:"bytes,1,opt,name=prevOutHash,proto3" json:"prevOutHash,omitempty"`
	PrevOutIndex uint32   `protobuf:"varint,2,opt,name=prevOutIndex,proto3" json:"prevOutIndex,omitempty"`
	PrevOutValue uint64   `protobuf:"varint,3,opt,name=prevOutValue,proto3" json:"prevOutValue,omitempty"`
	Sequence     uint32   `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Keypath      []uint32 `protobuf:"varint,6,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	// References a script config from BTCSignInitRequest
	ScriptConfigIndex    uint32                         `protobuf:"varint,7,opt,name=script_config_index,json=scriptConfigIndex,proto3" json:"script_config_index,omitempty"`
	HostNonceCommitment  *AntiKleptoHostNonceCommitment `protobuf:"bytes,8,opt,name=host_nonce_commitment,json=hostNonceCommitment,proto3" json:"host_nonce_commitment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *BTCSignInputRequest) Reset()         { *m = BTCSignInputRequest{} }
func (m *BTCSignInputRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignInputRequest) ProtoMessage()    {}
func (*BTCSignInputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{5}
}

func (m *BTCSignInputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignInputRequest.Unmarshal(m, b)
}
func (m *BTCSignInputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignInputRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignInputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignInputRequest.Merge(m, src)
}
func (m *BTCSignInputRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignInputRequest.Size(m)
}
func (m *BTCSignInputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignInputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignInputRequest proto.InternalMessageInfo

func (m *BTCSignInputRequest) GetPrevOutHash() []byte {
	if m != nil {
		return m.PrevOutHash
	}
	return nil
}

func (m *BTCSignInputRequest) GetPrevOutIndex() uint32 {
	if m != nil {
		return m.PrevOutIndex
	}
	return 0
}

func (m *BTCSignInputRequest) GetPrevOutValue() uint64 {
	if m != nil {
		return m.PrevOutValue
	}
	return 0
}

func (m *BTCSignInputRequest) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *BTCSignInputRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func (m *BTCSignInputRequest) GetScriptConfigIndex() uint32 {
	if m != nil {
		return m.ScriptConfigIndex
	}
	return 0
}

func (m *BTCSignInputRequest) GetHostNonceCommitment() *AntiKleptoHostNonceCommitment {
	if m != nil {
		return m.HostNonceCommitment
	}
	return nil
}

type BTCSignOutputRequest struct {
	Ours bool          `protobuf:"varint,1,opt,name=ours,proto3" json:"ours,omitempty"`
	Type BTCOutputType `protobuf:"varint,2,opt,name=type,proto3,enum=shiftcrypto.bitbox02.BTCOutputType" json:"type,omitempty"`
	// 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
	Value   uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Payload []byte   `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Keypath []uint32 `protobuf:"varint,5,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	// If ours is true. References a script config from BTCSignInitRequest
	ScriptConfigIndex    uint32   `protobuf:"varint,6,opt,name=script_config_index,json=scriptConfigIndex,proto3" json:"script_config_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCSignOutputRequest) Reset()         { *m = BTCSignOutputRequest{} }
func (m *BTCSignOutputRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignOutputRequest) ProtoMessage()    {}
func (*BTCSignOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{6}
}

func (m *BTCSignOutputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignOutputRequest.Unmarshal(m, b)
}
func (m *BTCSignOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignOutputRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignOutputRequest.Merge(m, src)
}
func (m *BTCSignOutputRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignOutputRequest.Size(m)
}
func (m *BTCSignOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignOutputRequest proto.InternalMessageInfo

func (m *BTCSignOutputRequest) GetOurs() bool {
	if m != nil {
		return m.Ours
	}
	return false
}

func (m *BTCSignOutputRequest) GetType() BTCOutputType {
	if m != nil {
		return m.Type
	}
	return BTCOutputType_UNKNOWN
}

func (m *BTCSignOutputRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *BTCSignOutputRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *BTCSignOutputRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func (m *BTCSignOutputRequest) GetScriptConfigIndex() uint32 {
	if m != nil {
		return m.ScriptConfigIndex
	}
	return 0
}

type BTCScriptConfigRegistration struct {
	Coin                 BTCCoin          `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.BTCCoin" json:"coin,omitempty"`
	ScriptConfig         *BTCScriptConfig `protobuf:"bytes,2,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
	Keypath              []uint32         `protobuf:"varint,3,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BTCScriptConfigRegistration) Reset()         { *m = BTCScriptConfigRegistration{} }
func (m *BTCScriptConfigRegistration) String() string { return proto.CompactTextString(m) }
func (*BTCScriptConfigRegistration) ProtoMessage()    {}
func (*BTCScriptConfigRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{7}
}

func (m *BTCScriptConfigRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCScriptConfigRegistration.Unmarshal(m, b)
}
func (m *BTCScriptConfigRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCScriptConfigRegistration.Marshal(b, m, deterministic)
}
func (m *BTCScriptConfigRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCScriptConfigRegistration.Merge(m, src)
}
func (m *BTCScriptConfigRegistration) XXX_Size() int {
	return xxx_messageInfo_BTCScriptConfigRegistration.Size(m)
}
func (m *BTCScriptConfigRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCScriptConfigRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_BTCScriptConfigRegistration proto.InternalMessageInfo

func (m *BTCScriptConfigRegistration) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCScriptConfigRegistration) GetScriptConfig() *BTCScriptConfig {
	if m != nil {
		return m.ScriptConfig
	}
	return nil
}

func (m *BTCScriptConfigRegistration) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

type BTCSuccess struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCSuccess) Reset()         { *m = BTCSuccess{} }
func (m *BTCSuccess) String() string { return proto.CompactTextString(m) }
func (*BTCSuccess) ProtoMessage()    {}
func (*BTCSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{8}
}

func (m *BTCSuccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSuccess.Unmarshal(m, b)
}
func (m *BTCSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSuccess.Marshal(b, m, deterministic)
}
func (m *BTCSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSuccess.Merge(m, src)
}
func (m *BTCSuccess) XXX_Size() int {
	return xxx_messageInfo_BTCSuccess.Size(m)
}
func (m *BTCSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSuccess proto.InternalMessageInfo

type BTCIsScriptConfigRegisteredRequest struct {
	Registration         *BTCScriptConfigRegistration `protobuf:"bytes,1,opt,name=registration,proto3" json:"registration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *BTCIsScriptConfigRegisteredRequest) Reset()         { *m = BTCIsScriptConfigRegisteredRequest{} }
func (m *BTCIsScriptConfigRegisteredRequest) String() string { return proto.CompactTextString(m) }
func (*BTCIsScriptConfigRegisteredRequest) ProtoMessage()    {}
func (*BTCIsScriptConfigRegisteredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{9}
}

func (m *BTCIsScriptConfigRegisteredRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCIsScriptConfigRegisteredRequest.Unmarshal(m, b)
}
func (m *BTCIsScriptConfigRegisteredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCIsScriptConfigRegisteredRequest.Marshal(b, m, deterministic)
}
func (m *BTCIsScriptConfigRegisteredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCIsScriptConfigRegisteredRequest.Merge(m, src)
}
func (m *BTCIsScriptConfigRegisteredRequest) XXX_Size() int {
	return xxx_messageInfo_BTCIsScriptConfigRegisteredRequest.Size(m)
}
func (m *BTCIsScriptConfigRegisteredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCIsScriptConfigRegisteredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCIsScriptConfigRegisteredRequest proto.InternalMessageInfo

func (m *BTCIsScriptConfigRegisteredRequest) GetRegistration() *BTCScriptConfigRegistration {
	if m != nil {
		return m.Registration
	}
	return nil
}

type BTCIsScriptConfigRegisteredResponse struct {
	IsRegistered         bool     `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCIsScriptConfigRegisteredResponse) Reset()         { *m = BTCIsScriptConfigRegisteredResponse{} }
func (m *BTCIsScriptConfigRegisteredResponse) String() string { return proto.CompactTextString(m) }
func (*BTCIsScriptConfigRegisteredResponse) ProtoMessage()    {}
func (*BTCIsScriptConfigRegisteredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{10}
}

func (m *BTCIsScriptConfigRegisteredResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCIsScriptConfigRegisteredResponse.Unmarshal(m, b)
}
func (m *BTCIsScriptConfigRegisteredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCIsScriptConfigRegisteredResponse.Marshal(b, m, deterministic)
}
func (m *BTCIsScriptConfigRegisteredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCIsScriptConfigRegisteredResponse.Merge(m, src)
}
func (m *BTCIsScriptConfigRegisteredResponse) XXX_Size() int {
	return xxx_messageInfo_BTCIsScriptConfigRegisteredResponse.Size(m)
}
func (m *BTCIsScriptConfigRegisteredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCIsScriptConfigRegisteredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCIsScriptConfigRegisteredResponse proto.InternalMessageInfo

func (m *BTCIsScriptConfigRegisteredResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type BTCRegisterScriptConfigRequest struct {
	Registration *BTCScriptConfigRegistration `protobuf:"bytes,1,opt,name=registration,proto3" json:"registration,omitempty"`
	// If empty, the name is entered on the device instead.
	Name                 string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XpubType             BTCRegisterScriptConfigRequest_XPubType `protobuf:"varint,3,opt,name=xpub_type,json=xpubType,proto3,enum=shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest_XPubType" json:"xpub_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *BTCRegisterScriptConfigRequest) Reset()         { *m = BTCRegisterScriptConfigRequest{} }
func (m *BTCRegisterScriptConfigRequest) String() string { return proto.CompactTextString(m) }
func (*BTCRegisterScriptConfigRequest) ProtoMessage()    {}
func (*BTCRegisterScriptConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{11}
}

func (m *BTCRegisterScriptConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCRegisterScriptConfigRequest.Unmarshal(m, b)
}
func (m *BTCRegisterScriptConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCRegisterScriptConfigRequest.Marshal(b, m, deterministic)
}
func (m *BTCRegisterScriptConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCRegisterScriptConfigRequest.Merge(m, src)
}
func (m *BTCRegisterScriptConfigRequest) XXX_Size() int {
	return xxx_messageInfo_BTCRegisterScriptConfigRequest.Size(m)
}
func (m *BTCRegisterScriptConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCRegisterScriptConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCRegisterScriptConfigRequest proto.InternalMessageInfo

func (m *BTCRegisterScriptConfigRequest) GetRegistration() *BTCScriptConfigRegistration {
	if m != nil {
		return m.Registration
	}
	return nil
}

func (m *BTCRegisterScriptConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BTCRegisterScriptConfigRequest) GetXpubType() BTCRegisterScriptConfigRequest_XPubType {
	if m != nil {
		return m.XpubType
	}
	return BTCRegisterScriptConfigRequest_AUTO_ELECTRUM
}

type BTCPrevTxInitRequest struct {
	Version              uint32   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	NumInputs            uint32   `protobuf:"varint,2,opt,name=num_inputs,json=numInputs,proto3" json:"num_inputs,omitempty"`
	NumOutputs           uint32   `protobuf:"varint,3,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	Locktime             uint32   `protobuf:"varint,4,opt,name=locktime,proto3" json:"locktime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCPrevTxInitRequest) Reset()         { *m = BTCPrevTxInitRequest{} }
func (m *BTCPrevTxInitRequest) String() string { return proto.CompactTextString(m) }
func (*BTCPrevTxInitRequest) ProtoMessage()    {}
func (*BTCPrevTxInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{12}
}

func (m *BTCPrevTxInitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCPrevTxInitRequest.Unmarshal(m, b)
}
func (m *BTCPrevTxInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCPrevTxInitRequest.Marshal(b, m, deterministic)
}
func (m *BTCPrevTxInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCPrevTxInitRequest.Merge(m, src)
}
func (m *BTCPrevTxInitRequest) XXX_Size() int {
	return xxx_messageInfo_BTCPrevTxInitRequest.Size(m)
}
func (m *BTCPrevTxInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCPrevTxInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCPrevTxInitRequest proto.InternalMessageInfo

func (m *BTCPrevTxInitRequest) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BTCPrevTxInitRequest) GetNumInputs() uint32 {
	if m != nil {
		return m.NumInputs
	}
	return 0
}

func (m *BTCPrevTxInitRequest) GetNumOutputs() uint32 {
	if m != nil {
		return m.NumOutputs
	}
	return 0
}

func (m *BTCPrevTxInitRequest) GetLocktime() uint32 {
	if m != nil {
		return m.Locktime
	}
	return 0
}

type BTCPrevTxInputRequest struct {
	PrevOutHash          []byte   `protobuf:"bytes,1,opt,name=prev_out_hash,json=prevOutHash,proto3" json:"prev_out_hash,omitempty"`
	PrevOutIndex         uint32   `protobuf:"varint,2,opt,name=prev_out_index,json=prevOutIndex,proto3" json:"prev_out_index,omitempty"`
	SignatureScript      []byte   `protobuf:"bytes,3,opt,name=signature_script,json=signatureScript,proto3" json:"signature_script,omitempty"`
	Sequence             uint32   `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCPrevTxInputRequest) Reset()         { *m = BTCPrevTxInputRequest{} }
func (m *BTCPrevTxInputRequest) String() string { return proto.CompactTextString(m) }
func (*BTCPrevTxInputRequest) ProtoMessage()    {}
func (*BTCPrevTxInputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{13}
}

func (m *BTCPrevTxInputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCPrevTxInputRequest.Unmarshal(m, b)
}
func (m *BTCPrevTxInputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCPrevTxInputRequest.Marshal(b, m, deterministic)
}
func (m *BTCPrevTxInputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCPrevTxInputRequest.Merge(m, src)
}
func (m *BTCPrevTxInputRequest) XXX_Size() int {
	return xxx_messageInfo_BTCPrevTxInputRequest.Size(m)
}
func (m *BTCPrevTxInputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCPrevTxInputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCPrevTxInputRequest proto.InternalMessageInfo

func (m *BTCPrevTxInputRequest) GetPrevOutHash() []byte {
	if m != nil {
		return m.PrevOutHash
	}
	return nil
}

func (m *BTCPrevTxInputRequest) GetPrevOutIndex() uint32 {
	if m != nil {
		return m.PrevOutIndex
	}
	return 0
}

func (m *BTCPrevTxInputRequest) GetSignatureScript() []byte {
	if m != nil {
		return m.SignatureScript
	}
	return nil
}

func (m *BTCPrevTxInputRequest) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type BTCPrevTxOutputRequest struct {
	Value                uint64   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	PubkeyScript         []byte   `protobuf:"bytes,2,opt,name=pubkey_script,json=pubkeyScript,proto3" json:"pubkey_script,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCPrevTxOutputRequest) Reset()         { *m = BTCPrevTxOutputRequest{} }
func (m *BTCPrevTxOutputRequest) String() string { return proto.CompactTextString(m) }
func (*BTCPrevTxOutputRequest) ProtoMessage()    {}
func (*BTCPrevTxOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{14}
}

func (m *BTCPrevTxOutputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCPrevTxOutputRequest.Unmarshal(m, b)
}
func (m *BTCPrevTxOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCPrevTxOutputRequest.Marshal(b, m, deterministic)
}
func (m *BTCPrevTxOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCPrevTxOutputRequest.Merge(m, src)
}
func (m *BTCPrevTxOutputRequest) XXX_Size() int {
	return xxx_messageInfo_BTCPrevTxOutputRequest.Size(m)
}
func (m *BTCPrevTxOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCPrevTxOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCPrevTxOutputRequest proto.InternalMessageInfo

func (m *BTCPrevTxOutputRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *BTCPrevTxOutputRequest) GetPubkeyScript() []byte {
	if m != nil {
		return m.PubkeyScript
	}
	return nil
}

type BTCSignMessageRequest struct {
	Coin                 BTCCoin                        `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.BTCCoin" json:"coin,omitempty"`
	ScriptConfig         *BTCScriptConfigWithKeypath    `protobuf:"bytes,2,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
	Msg                  []byte                         `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	HostNonceCommitment  *AntiKleptoHostNonceCommitment `protobuf:"bytes,4,opt,name=host_nonce_commitment,json=hostNonceCommitment,proto3" json:"host_nonce_commitment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *BTCSignMessageRequest) Reset()         { *m = BTCSignMessageRequest{} }
func (m *BTCSignMessageRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignMessageRequest) ProtoMessage()    {}
func (*BTCSignMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{15}
}

func (m *BTCSignMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignMessageRequest.Unmarshal(m, b)
}
func (m *BTCSignMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignMessageRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignMessageRequest.Merge(m, src)
}
func (m *BTCSignMessageRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignMessageRequest.Size(m)
}
func (m *BTCSignMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignMessageRequest proto.InternalMessageInfo

func (m *BTCSignMessageRequest) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCSignMessageRequest) GetScriptConfig() *BTCScriptConfigWithKeypath {
	if m != nil {
		return m.ScriptConfig
	}
	return nil
}

func (m *BTCSignMessageRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *BTCSignMessageRequest) GetHostNonceCommitment() *AntiKleptoHostNonceCommitment {
	if m != nil {
		return m.HostNonceCommitment
	}
	return nil
}

type BTCSignMessageResponse struct {
	// 65 bytes (32 bytes big endian R, 32 bytes big endian S, 1 recid).
	Signature            []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCSignMessageResponse) Reset()         { *m = BTCSignMessageResponse{} }
func (m *BTCSignMessageResponse) String() string { return proto.CompactTextString(m) }
func (*BTCSignMessageResponse) ProtoMessage()    {}
func (*BTCSignMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{16}
}

func (m *BTCSignMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignMessageResponse.Unmarshal(m, b)
}
func (m *BTCSignMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignMessageResponse.Marshal(b, m, deterministic)
}
func (m *BTCSignMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignMessageResponse.Merge(m, src)
}
func (m *BTCSignMessageResponse) XXX_Size() int {
	return xxx_messageInfo_BTCSignMessageResponse.Size(m)
}
func (m *BTCSignMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignMessageResponse proto.InternalMessageInfo

func (m *BTCSignMessageResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BTCRequest struct {
	// Types that are valid to be assigned to Request:
	//	*BTCRequest_IsScriptConfigRegistered
	//	*BTCRequest_RegisterScriptConfig
	//	*BTCRequest_PrevtxInit
	//	*BTCRequest_PrevtxInput
	//	*BTCRequest_PrevtxOutput
	//	*BTCRequest_SignMessage
	//	*BTCRequest_AntikleptoSignature
	Request              isBTCRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BTCRequest) Reset()         { *m = BTCRequest{} }
func (m *BTCRequest) String() string { return proto.CompactTextString(m) }
func (*BTCRequest) ProtoMessage()    {}
func (*BTCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{17}
}

func (m *BTCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCRequest.Unmarshal(m, b)
}
func (m *BTCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCRequest.Marshal(b, m, deterministic)
}
func (m *BTCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCRequest.Merge(m, src)
}
func (m *BTCRequest) XXX_Size() int {
	return xxx_messageInfo_BTCRequest.Size(m)
}
func (m *BTCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCRequest proto.InternalMessageInfo

type isBTCRequest_Request interface {
	isBTCRequest_Request()
}

type BTCRequest_IsScriptConfigRegistered struct {
	IsScriptConfigRegistered *BTCIsScriptConfigRegisteredRequest `protobuf:"bytes,1,opt,name=is_script_config_registered,json=isScriptConfigRegistered,proto3,oneof"`
}

type BTCRequest_RegisterScriptConfig struct {
	RegisterScriptConfig *BTCRegisterScriptConfigRequest `protobuf:"bytes,2,opt,name=register_script_config,json=registerScriptConfig,proto3,oneof"`
}

type BTCRequest_PrevtxInit struct {
	PrevtxInit *BTCPrevTxInitRequest `protobuf:"bytes,3,opt,name=prevtx_init,json=prevtxInit,proto3,oneof"`
}

type BTCRequest_PrevtxInput struct {
	PrevtxInput *BTCPrevTxInputRequest `protobuf:"bytes,4,opt,name=prevtx_input,json=prevtxInput,proto3,oneof"`
}

type BTCRequest_PrevtxOutput struct {
	PrevtxOutput *BTCPrevTxOutputRequest `protobuf:"bytes,5,opt,name=prevtx_output,json=prevtxOutput,proto3,oneof"`
}

type BTCRequest_SignMessage struct {
	SignMessage *BTCSignMessageRequest `protobuf:"bytes,6,opt,name=sign_message,json=signMessage,proto3,oneof"`
}

type BTCRequest_AntikleptoSignature struct {
	AntikleptoSignature *AntiKleptoSignatureRequest `protobuf:"bytes,7,opt,name=antiklepto_signature,json=antikleptoSignature,proto3,oneof"`
}

func (*BTCRequest_IsScriptConfigRegistered) isBTCRequest_Request() {}

func (*BTCRequest_RegisterScriptConfig) isBTCRequest_Request() {}

func (*BTCRequest_PrevtxInit) isBTCRequest_Request() {}

func (*BTCRequest_PrevtxInput) isBTCRequest_Request() {}

func (*BTCRequest_PrevtxOutput) isBTCRequest_Request() {}

func (*BTCRequest_SignMessage) isBTCRequest_Request() {}

func (*BTCRequest_AntikleptoSignature) isBTCRequest_Request() {}

func (m *BTCRequest) GetRequest() isBTCRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *BTCRequest) GetIsScriptConfigRegistered() *BTCIsScriptConfigRegisteredRequest {
	if x, ok := m.GetRequest().(*BTCRequest_IsScriptConfigRegistered); ok {
		return x.IsScriptConfigRegistered
	}
	return nil
}

func (m *BTCRequest) GetRegisterScriptConfig() *BTCRegisterScriptConfigRequest {
	if x, ok := m.GetRequest().(*BTCRequest_RegisterScriptConfig); ok {
		return x.RegisterScriptConfig
	}
	return nil
}

func (m *BTCRequest) GetPrevtxInit() *BTCPrevTxInitRequest {
	if x, ok := m.GetRequest().(*BTCRequest_PrevtxInit); ok {
		return x.PrevtxInit
	}
	return nil
}

func (m *BTCRequest) GetPrevtxInput() *BTCPrevTxInputRequest {
	if x, ok := m.GetRequest().(*BTCRequest_PrevtxInput); ok {
		return x.PrevtxInput
	}
	return nil
}

func (m *BTCRequest) GetPrevtxOutput() *BTCPrevTxOutputRequest {
	if x, ok := m.GetRequest().(*BTCRequest_PrevtxOutput); ok {
		return x.PrevtxOutput
	}
	return nil
}

func (m *BTCRequest) GetSignMessage() *BTCSignMessageRequest {
	if x, ok := m.GetRequest().(*BTCRequest_SignMessage); ok {
		return x.SignMessage
	}
	return nil
}

func (m *BTCRequest) GetAntikleptoSignature() *AntiKleptoSignatureRequest {
	if x, ok := m.GetRequest().(*BTCRequest_AntikleptoSignature); ok {
		return x.AntikleptoSignature
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BTCRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BTCRequest_IsScriptConfigRegistered)(nil),
		(*BTCRequest_RegisterScriptConfig)(nil),
		(*BTCRequest_PrevtxInit)(nil),
		(*BTCRequest_PrevtxInput)(nil),
		(*BTCRequest_PrevtxOutput)(nil),
		(*BTCRequest_SignMessage)(nil),
		(*BTCRequest_AntikleptoSignature)(nil),
	}
}

type BTCResponse struct {
	// Types that are valid to be assigned to Response:
	//	*BTCResponse_Success
	//	*BTCResponse_IsScriptConfigRegistered
	//	*BTCResponse_SignNext
	//	*BTCResponse_SignMessage
	//	*BTCResponse_AntikleptoSignerCommitment
	Response             isBTCResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BTCResponse) Reset()         { *m = BTCResponse{} }
func (m *BTCResponse) String() string { return proto.CompactTextString(m) }
func (*BTCResponse) ProtoMessage()    {}
func (*BTCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{18}
}

func (m *BTCResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCResponse.Unmarshal(m, b)
}
func (m *BTCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCResponse.Marshal(b, m, deterministic)
}
func (m *BTCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCResponse.Merge(m, src)
}
func (m *BTCResponse) XXX_Size() int {
	return xxx_messageInfo_BTCResponse.Size(m)
}
func (m *BTCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCResponse proto.InternalMessageInfo

type isBTCResponse_Response interface {
	isBTCResponse_Response()
}

type BTCResponse_Success struct {
	Success *BTCSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type BTCResponse_IsScriptConfigRegistered struct {
	IsScriptConfigRegistered *BTCIsScriptConfigRegisteredResponse `protobuf:"bytes,2,opt,name=is_script_config_registered,json=isScriptConfigRegistered,proto3,oneof"`
}

type BTCResponse_SignNext struct {
	SignNext *BTCSignNextResponse `protobuf:"bytes,3,opt,name=sign_next,json=signNext,proto3,oneof"`
}

type BTCResponse_SignMessage struct {
	SignMessage *BTCSignMessageResponse `protobuf:"bytes,4,opt,name=sign_message,json=signMessage,proto3,oneof"`
}

type BTCResponse_AntikleptoSignerCommitment struct {
	AntikleptoSignerCommitment *AntiKleptoSignerCommitment `protobuf:"bytes,5,opt,name=antiklepto_signer_commitment,json=antikleptoSignerCommitment,proto3,oneof"`
}

func (*BTCResponse_Success) isBTCResponse_Response() {}

func (*BTCResponse_IsScriptConfigRegistered) isBTCResponse_Response() {}

func (*BTCResponse_SignNext) isBTCResponse_Response() {}

func (*BTCResponse_SignMessage) isBTCResponse_Response() {}

func (*BTCResponse_AntikleptoSignerCommitment) isBTCResponse_Response() {}

func (m *BTCResponse) GetResponse() isBTCResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *BTCResponse) GetSuccess() *BTCSuccess {
	if x, ok := m.GetResponse().(*BTCResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (m *BTCResponse) GetIsScriptConfigRegistered() *BTCIsScriptConfigRegisteredResponse {
	if x, ok := m.GetResponse().(*BTCResponse_IsScriptConfigRegistered); ok {
		return x.IsScriptConfigRegistered
	}
	return nil
}

func (m *BTCResponse) GetSignNext() *BTCSignNextResponse {
	if x, ok := m.GetResponse().(*BTCResponse_SignNext); ok {
		return x.SignNext
	}
	return nil
}

func (m *BTCResponse) GetSignMessage() *BTCSignMessageResponse {
	if x, ok := m.GetResponse().(*BTCResponse_SignMessage); ok {
		return x.SignMessage
	}
	return nil
}

func (m *BTCResponse) GetAntikleptoSignerCommitment() *AntiKleptoSignerCommitment {
	if x, ok := m.GetResponse().(*BTCResponse_AntikleptoSignerCommitment); ok {
		return x.AntikleptoSignerCommitment
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BTCResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BTCResponse_Success)(nil),
		(*BTCResponse_IsScriptConfigRegistered)(nil),
		(*BTCResponse_SignNext)(nil),
		(*BTCResponse_SignMessage)(nil),
		(*BTCResponse_AntikleptoSignerCommitment)(nil),
	}
}

func init() {
	proto.RegisterEnum("shiftcrypto.bitbox02.BTCCoin", BTCCoin_name, BTCCoin_value)
	proto.RegisterEnum("shiftcrypto.bitbox02.BTCOutputType", BTCOutputType_name, BTCOutputType_value)
	proto.RegisterEnum("shiftcrypto.bitbox02.BTCScriptConfig_SimpleType", BTCScriptConfig_SimpleType_name, BTCScriptConfig_SimpleType_value)
	proto.RegisterEnum("shiftcrypto.bitbox02.BTCScriptConfig_Multisig_ScriptType", BTCScriptConfig_Multisig_ScriptType_name, BTCScriptConfig_Multisig_ScriptType_value)
	proto.RegisterEnum("shiftcrypto.bitbox02.BTCPubRequest_XPubType", BTCPubRequest_XPubType_name, BTCPubRequest_XPubType_value)
	proto.RegisterEnum("shiftcrypto.bitbox02.BTCSignNextResponse_Type", BTCSignNextResponse_Type_name, BTCSignNextResponse_Type_value)
	proto.RegisterEnum("shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest_XPubType", BTCRegisterScriptConfigRequest_XPubType_name, BTCRegisterScriptConfigRequest_XPubType_value)
	proto.RegisterType((*BTCScriptConfig)(nil), "shiftcrypto.bitbox02.BTCScriptConfig")
	proto.RegisterType((*BTCScriptConfig_Multisig)(nil), "shiftcrypto.bitbox02.BTCScriptConfig.Multisig")
	proto.RegisterType((*BTCPubRequest)(nil), "shiftcrypto.bitbox02.BTCPubRequest")
	proto.RegisterType((*BTCScriptConfigWithKeypath)(nil), "shiftcrypto.bitbox02.BTCScriptConfigWithKeypath")
	proto.RegisterType((*BTCSignInitRequest)(nil), "shiftcrypto.bitbox02.BTCSignInitRequest")
	proto.RegisterType((*BTCSignNextResponse)(nil), "shiftcrypto.bitbox02.BTCSignNextResponse")
	proto.RegisterType((*BTCSignInputRequest)(nil), "shiftcrypto.bitbox02.BTCSignInputRequest")
	proto.RegisterType((*BTCSignOutputRequest)(nil), "shiftcrypto.bitbox02.BTCSignOutputRequest")
	proto.RegisterType((*BTCScriptConfigRegistration)(nil), "shiftcrypto.bitbox02.BTCScriptConfigRegistration")
	proto.RegisterType((*BTCSuccess)(nil), "shiftcrypto.bitbox02.BTCSuccess")
	proto.RegisterType((*BTCIsScriptConfigRegisteredRequest)(nil), "shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest")
	proto.RegisterType((*BTCIsScriptConfigRegisteredResponse)(nil), "shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse")
	proto.RegisterType((*BTCRegisterScriptConfigRequest)(nil), "shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest")
	proto.RegisterType((*BTCPrevTxInitRequest)(nil), "shiftcrypto.bitbox02.BTCPrevTxInitRequest")
	proto.RegisterType((*BTCPrevTxInputRequest)(nil), "shiftcrypto.bitbox02.BTCPrevTxInputRequest")
	proto.RegisterType((*BTCPrevTxOutputRequest)(nil), "shiftcrypto.bitbox02.BTCPrevTxOutputRequest")
	proto.RegisterType((*BTCSignMessageRequest)(nil), "shiftcrypto.bitbox02.BTCSignMessageRequest")
	proto.RegisterType((*BTCSignMessageResponse)(nil), "shiftcrypto.bitbox02.BTCSignMessageResponse")
	proto.RegisterType((*BTCRequest)(nil), "shiftcrypto.bitbox02.BTCRequest")
	proto.RegisterType((*BTCResponse)(nil), "shiftcrypto.bitbox02.BTCResponse")
}

func init() { proto.RegisterFile("btc.proto", fileDescriptor_a38f9ffa5c78f451) }

var fileDescriptor_a38f9ffa5c78f451 = []byte{
	// 1670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xfa, 0xbf, 0x9f, 0xed, 0xd4, 0x9d, 0xa4, 0x95, 0x95, 0xb6, 0x10, 0x6d, 0x8a, 0x48,
	0x5b, 0x64, 0x5a, 0x17, 0x01, 0x95, 0xe0, 0x10, 0x9b, 0x48, 0x76, 0x93, 0xd8, 0x66, 0xbc, 0x6e,
	0x42, 0x2f, 0x2b, 0xdb, 0xd9, 0xda, 0xab, 0xd8, 0xbb, 0xcb, 0xce, 0x6c, 0x64, 0xc3, 0x0d, 0x89,
	0x1b, 0xe2, 0xc8, 0x01, 0xf1, 0x01, 0x38, 0x20, 0x71, 0x82, 0x8f, 0xc1, 0x37, 0xe0, 0xca, 0x9d,
	0x6f, 0x80, 0x66, 0x66, 0xff, 0x3a, 0xb1, 0x93, 0xa6, 0xc0, 0x6d, 0xe6, 0xcd, 0xbc, 0x99, 0x37,
	0xbf, 0xf7, 0xde, 0x6f, 0xde, 0x0c, 0xe4, 0x06, 0x74, 0x58, 0xb1, 0x6c, 0x93, 0x9a, 0x68, 0x83,
	0x8c, 0xf5, 0x57, 0x74, 0x68, 0xcf, 0x2d, 0x6a, 0x56, 0x06, 0x3a, 0x1d, 0x98, 0xb3, 0xc7, 0xd5,
	0xcd, 0xc2, 0xd0, 0x9c, 0x4e, 0x4d, 0x43, 0xcc, 0xd9, 0x2c, 0xf5, 0x0d, 0xaa, 0x9f, 0x4e, 0x34,
	0x36, 0x85, 0x4b, 0xe4, 0xbf, 0x13, 0x70, 0xa3, 0xa6, 0xd4, 0xbb, 0x43, 0x5b, 0xb7, 0x68, 0xdd,
	0x34, 0x5e, 0xe9, 0x23, 0xd4, 0x85, 0x3c, 0xd1, 0xa7, 0xd6, 0x44, 0x53, 0xe9, 0xdc, 0xd2, 0xca,
	0xd2, 0x96, 0xb4, 0xb3, 0x56, 0x7d, 0x5c, 0xb9, 0x68, 0xfd, 0xca, 0x82, 0x6e, 0xa5, 0xcb, 0x15,
	0x95, 0xb9, 0xa5, 0x35, 0x62, 0x18, 0x88, 0xdf, 0x43, 0x07, 0x90, 0x9d, 0x3a, 0x13, 0xaa, 0x13,
	0x7d, 0x54, 0x8e, 0x6f, 0x49, 0x3b, 0xf9, 0x6a, 0xe5, 0x6a, 0x2b, 0x1e, 0xba, 0x5a, 0x8d, 0x18,
	0xf6, 0x57, 0xd8, 0xfc, 0x36, 0x0e, 0x59, 0x6f, 0x00, 0xdd, 0x85, 0x1c, 0x1d, 0xdb, 0x1a, 0x19,
	0x9b, 0x93, 0x13, 0x6e, 0x6d, 0x11, 0x07, 0x02, 0xf4, 0x18, 0x52, 0x33, 0xcb, 0x19, 0x90, 0x72,
	0x7c, 0x2b, 0xb1, 0x93, 0xaf, 0x6e, 0x5e, 0xbc, 0xeb, 0x71, 0xc7, 0x19, 0x60, 0x31, 0x11, 0xdd,
	0x87, 0x35, 0xd3, 0xb1, 0x55, 0xd6, 0x51, 0x75, 0xe3, 0x44, 0x9b, 0x95, 0x13, 0x7c, 0xd1, 0x82,
	0xe9, 0xd8, 0xc7, 0x96, 0x33, 0x68, 0x32, 0x19, 0x7a, 0x09, 0x79, 0xc2, 0xed, 0x14, 0x28, 0x25,
	0x39, 0x4a, 0xcf, 0x5e, 0xef, 0x4c, 0x15, 0x21, 0x65, 0x00, 0x61, 0x20, 0x7e, 0x5b, 0x7e, 0x17,
	0x20, 0x18, 0x41, 0x39, 0x48, 0x75, 0xaa, 0x47, 0xdd, 0x46, 0x29, 0x86, 0xd6, 0x00, 0x78, 0x53,
	0xed, 0x54, 0xbb, 0x8d, 0x92, 0x24, 0x3f, 0x00, 0x08, 0x10, 0x47, 0x37, 0x20, 0xdf, 0xa9, 0x1e,
	0x75, 0xf6, 0xdd, 0xe1, 0x18, 0x02, 0x48, 0x0b, 0x41, 0x49, 0xaa, 0x65, 0x21, 0x3d, 0xe4, 0xbb,
	0xcb, 0xbf, 0x24, 0xa0, 0x58, 0x53, 0xea, 0xec, 0xc4, 0xda, 0x97, 0x8e, 0x46, 0x28, 0x7a, 0x02,
	0xc9, 0xa1, 0xa9, 0x1b, 0xae, 0xab, 0xef, 0x2d, 0x3d, 0x44, 0xdd, 0xd4, 0x0d, 0xcc, 0xa7, 0xa2,
	0x32, 0x64, 0x4e, 0xb5, 0xb9, 0xd5, 0xa7, 0x63, 0x0e, 0x6c, 0x11, 0x7b, 0x5d, 0xb4, 0x0f, 0x39,
	0x0e, 0x1d, 0x87, 0x25, 0xc1, 0x57, 0x7c, 0x6f, 0xe9, 0x8a, 0x81, 0x11, 0xdc, 0x05, 0x6e, 0xe0,
	0x64, 0xd9, 0x02, 0x6e, 0xd8, 0x14, 0x5d, 0x94, 0x85, 0xf1, 0x1c, 0xe7, 0x7c, 0xf5, 0x9d, 0x2b,
	0xe1, 0xdc, 0x88, 0xe1, 0x02, 0x09, 0x47, 0x76, 0x19, 0x32, 0x27, 0x3a, 0xb1, 0x26, 0xfd, 0x79,
	0x39, 0xb5, 0x25, 0xed, 0x64, 0xb1, 0xd7, 0x95, 0xbf, 0x97, 0x20, 0xeb, 0x19, 0x80, 0xb2, 0x90,
	0x54, 0x3a, 0xbd, 0x5a, 0x29, 0xc6, 0x5a, 0xc7, 0xac, 0x25, 0xb1, 0xd6, 0x17, 0xac, 0x15, 0x67,
	0xad, 0x97, 0xac, 0x95, 0x60, 0xad, 0x17, 0xac, 0x95, 0x64, 0xad, 0x1e, 0x6b, 0xa5, 0x50, 0x09,
	0x0a, 0xf5, 0xdd, 0x4e, 0x53, 0xd9, 0x3d, 0x50, 0xf9, 0x58, 0x3a, 0x2c, 0xe1, 0x7a, 0x99, 0xb0,
	0x84, 0x6b, 0x65, 0xc3, 0x12, 0xbe, 0x4b, 0x8e, 0xb9, 0xcb, 0x74, 0xa8, 0xe5, 0x50, 0xf9, 0x1b,
	0x09, 0x36, 0x17, 0x0e, 0x76, 0xa4, 0xd3, 0xf1, 0xbe, 0x0b, 0xf7, 0xf3, 0x45, 0x84, 0xe2, 0xaf,
	0x81, 0xd0, 0x79, 0x7c, 0x3c, 0xa7, 0x26, 0x22, 0x4e, 0x95, 0x7f, 0x88, 0x03, 0x62, 0xba, 0xfa,
	0xc8, 0x68, 0x1a, 0x3a, 0x7d, 0x83, 0xc0, 0x39, 0x82, 0xb5, 0x88, 0xbd, 0x5e, 0x62, 0x5e, 0x8d,
	0x60, 0x42, 0x27, 0xc7, 0xc5, 0xb0, 0xed, 0x84, 0x19, 0x7f, 0xa6, 0xd9, 0x44, 0x37, 0x0d, 0x1e,
	0x24, 0x45, 0xec, 0x75, 0xd1, 0x3d, 0x00, 0xc3, 0x99, 0xaa, 0xba, 0x61, 0x39, 0x94, 0x70, 0xcf,
	0x17, 0x71, 0xce, 0x70, 0xa6, 0x4d, 0x2e, 0x40, 0x6f, 0x43, 0x9e, 0x0d, 0x0b, 0xb8, 0x49, 0x39,
	0xcd, 0xc7, 0x99, 0x46, 0x5b, 0x48, 0xd0, 0x26, 0x64, 0x27, 0xe6, 0xf0, 0x94, 0xea, 0x53, 0xad,
	0x9c, 0xe1, 0xa3, 0x7e, 0x5f, 0xfe, 0x2d, 0x01, 0xeb, 0x2e, 0x30, 0x2d, 0x6d, 0x46, 0xb1, 0x46,
	0x2c, 0xd3, 0x20, 0x1a, 0xaa, 0x41, 0x32, 0xc4, 0x9e, 0x2b, 0xb8, 0x6e, 0x41, 0xb1, 0xc2, 0xc9,
	0x80, 0xeb, 0xa2, 0x0d, 0x48, 0x09, 0xfe, 0x89, 0xf3, 0x4d, 0x45, 0x07, 0x6d, 0x43, 0x71, 0xdc,
	0x27, 0x2a, 0xd1, 0x47, 0x46, 0x9f, 0x3a, 0xb6, 0xc8, 0xb1, 0x2c, 0x2e, 0x8c, 0xfb, 0xa4, 0xeb,
	0xc9, 0x18, 0x27, 0x06, 0x13, 0x18, 0x1c, 0x05, 0x1c, 0x08, 0x18, 0x20, 0x96, 0xad, 0x9d, 0xb9,
	0xec, 0xe6, 0x02, 0xc2, 0x24, 0x82, 0xda, 0x08, 0xdc, 0x63, 0x17, 0x85, 0x2a, 0x6e, 0x0a, 0xbe,
	0x93, 0x66, 0xab, 0xec, 0x26, 0xd1, 0xe9, 0x54, 0x33, 0x28, 0x87, 0x68, 0xa9, 0xc7, 0x76, 0x0d,
	0xaa, 0xef, 0x73, 0xcd, 0x2e, 0x57, 0xac, 0xfb, 0x7a, 0x78, 0xb3, 0xbf, 0x74, 0x4c, 0x9e, 0x42,
	0xd2, 0x63, 0xbb, 0x66, 0xab, 0xd3, 0x53, 0x04, 0x7d, 0xb5, 0x7b, 0x0a, 0x6b, 0xf3, 0xfc, 0xfb,
	0xac, 0xdd, 0xda, 0x2b, 0xc5, 0x39, 0xcb, 0xe1, 0xbd, 0x17, 0xca, 0xb1, 0xda, 0x6c, 0x35, 0x95,
	0x52, 0x82, 0x25, 0x8f, 0x2f, 0x60, 0x93, 0x93, 0xe8, 0x26, 0x14, 0x5d, 0x89, 0xab, 0x9f, 0x62,
	0xcc, 0xd9, 0x68, 0x77, 0x15, 0xb5, 0xd5, 0x6e, 0xd5, 0xf7, 0x4a, 0x69, 0xf9, 0x8f, 0xb8, 0xef,
	0x37, 0x1e, 0x06, 0x5e, 0x44, 0x6f, 0x41, 0x9e, 0x01, 0xd1, 0x76, 0x68, 0xa3, 0x4f, 0xc6, 0xdc,
	0x7d, 0x05, 0x1c, 0x16, 0x21, 0x19, 0x0a, 0x6e, 0xb7, 0x19, 0x72, 0x4e, 0x44, 0x16, 0x9a, 0xf3,
	0xa2, 0x3f, 0x71, 0x84, 0x8b, 0x92, 0x38, 0x22, 0x63, 0x51, 0x45, 0xd8, 0xa6, 0xc6, 0x50, 0x73,
	0x03, 0xd6, 0xef, 0x87, 0x13, 0x31, 0x1d, 0x65, 0xd7, 0x0a, 0xac, 0x47, 0xd2, 0xc7, 0xf5, 0xa1,
	0x08, 0xcb, 0x9b, 0xe1, 0x8c, 0x10, 0x96, 0x8c, 0xe0, 0xd6, 0xd8, 0x24, 0x54, 0x35, 0x4c, 0x63,
	0xa8, 0x85, 0x7d, 0x98, 0xe5, 0x3e, 0x7c, 0x7a, 0x99, 0x0f, 0x1b, 0x26, 0xa1, 0x2d, 0xa6, 0x1b,
	0x72, 0xe3, 0xfa, 0xf8, 0xbc, 0x50, 0xfe, 0x53, 0x82, 0x0d, 0x17, 0x50, 0x91, 0x37, 0x1e, 0xa2,
	0x08, 0x92, 0xa6, 0x63, 0x13, 0x0e, 0x65, 0x16, 0xf3, 0x36, 0xfa, 0xc8, 0xcd, 0x8e, 0x38, 0xcf,
	0x8e, 0xed, 0xa5, 0xd9, 0x21, 0x56, 0x8a, 0xa6, 0xc4, 0x59, 0x08, 0x51, 0xd1, 0x61, 0x70, 0x59,
	0xfd, 0xf9, 0xc4, 0xec, 0x9f, 0xb8, 0xb1, 0xee, 0x75, 0xc3, 0x40, 0xa6, 0xae, 0x04, 0x64, 0x7a,
	0x09, 0x90, 0xf2, 0xef, 0x12, 0xdc, 0x59, 0x64, 0x4f, 0x6d, 0xa4, 0x13, 0x6a, 0xf7, 0x29, 0x23,
	0x99, 0x6b, 0x50, 0xe1, 0xff, 0x43, 0xdd, 0x05, 0x00, 0xa6, 0xea, 0x0c, 0x87, 0x1a, 0x21, 0xf2,
	0xd7, 0x20, 0xd7, 0x94, 0x7a, 0x93, 0x9c, 0x3f, 0x87, 0x66, 0x6b, 0x27, 0x9e, 0xcf, 0x7a, 0x50,
	0xb0, 0x43, 0x87, 0xe3, 0x87, 0xca, 0x57, 0x9f, 0x5c, 0xcd, 0xb0, 0x90, 0x22, 0x8e, 0x2c, 0x23,
	0x3f, 0x87, 0xed, 0x95, 0x9b, 0xbb, 0xdc, 0xb9, 0x0d, 0x45, 0x9d, 0xa8, 0xb6, 0x3f, 0xe0, 0x86,
	0x4e, 0x41, 0x27, 0xc1, 0x64, 0xf9, 0xc7, 0x38, 0xbc, 0x55, 0x53, 0xea, 0x9e, 0x24, 0xba, 0xe4,
	0x7f, 0x79, 0x0a, 0x16, 0xd0, 0x46, 0x7f, 0x2a, 0x82, 0x37, 0x87, 0x79, 0x1b, 0xbd, 0x3c, 0x5f,
	0xf4, 0x7c, 0xba, 0x74, 0x9f, 0x15, 0x36, 0xfb, 0x55, 0x50, 0x50, 0x03, 0xc9, 0x4f, 0x42, 0xa5,
	0xc9, 0x4d, 0x28, 0xee, 0xf6, 0x94, 0xb6, 0xba, 0x77, 0xb0, 0x57, 0x57, 0x70, 0xef, 0xb0, 0x14,
	0x43, 0x08, 0xd6, 0xb8, 0x88, 0x15, 0x2a, 0x2a, 0xaf, 0x5b, 0x24, 0xf9, 0x3b, 0x91, 0x8c, 0x1d,
	0x5b, 0x3b, 0x53, 0x66, 0xe1, 0x0b, 0x3b, 0x74, 0x49, 0x4a, 0xab, 0x2e, 0xc9, 0xf8, 0x25, 0x97,
	0x64, 0x62, 0xe5, 0x25, 0x99, 0x5c, 0xb8, 0x24, 0x7f, 0x96, 0xe0, 0x56, 0xc8, 0x9c, 0x10, 0x39,
	0xc8, 0x50, 0xe4, 0x37, 0x91, 0xe9, 0x50, 0x75, 0xbc, 0x84, 0x70, 0xef, 0xc3, 0x9a, 0x3f, 0x47,
	0x5f, 0x4a, 0xb9, 0x0f, 0xa0, 0xe4, 0x5f, 0x70, 0xaa, 0x48, 0x0d, 0x6e, 0x65, 0x01, 0xdf, 0xf0,
	0xe5, 0x02, 0xf0, 0x55, 0xcc, 0x2b, 0x77, 0xe1, 0xb6, 0x6f, 0x69, 0x94, 0xc7, 0x7c, 0xea, 0x91,
	0xc2, 0xd4, 0xb3, 0x0d, 0x45, 0xcb, 0x19, 0x9c, 0x6a, 0x73, 0x6f, 0xcf, 0x38, 0xdf, 0xb3, 0x20,
	0x84, 0x62, 0x43, 0xf9, 0xa7, 0x38, 0x3f, 0x3f, 0xe3, 0xc6, 0x43, 0x8d, 0x90, 0xfe, 0x48, 0x7b,
	0x83, 0x02, 0xaa, 0x77, 0x31, 0x6b, 0xbc, 0x7e, 0xfd, 0x14, 0x25, 0x90, 0x12, 0x24, 0xa6, 0x64,
	0xe4, 0x42, 0xc6, 0x9a, 0xcb, 0xaf, 0x8e, 0xe4, 0xbf, 0x7c, 0x75, 0x7c, 0xc8, 0x31, 0x8f, 0xa0,
	0xe3, 0x32, 0x41, 0xa4, 0x8c, 0x91, 0x16, 0xca, 0x18, 0xf9, 0xd7, 0x14, 0xa7, 0x36, 0x0f, 0xcb,
	0x39, 0xdc, 0xd1, 0x89, 0x1a, 0x25, 0xf5, 0x05, 0x12, 0xc9, 0x57, 0x3f, 0x5e, 0x0a, 0xd3, 0x25,
	0x9c, 0xd8, 0x88, 0xe1, 0xb2, 0xbe, 0x64, 0x0a, 0x9a, 0xc0, 0x6d, 0x6f, 0x27, 0xf5, 0x22, 0xe7,
	0x7c, 0x70, 0x1d, 0x2e, 0x68, 0xc4, 0xf0, 0x86, 0x7d, 0xc1, 0x30, 0x3a, 0x14, 0x35, 0x0a, 0x9d,
	0xa9, 0xba, 0xa1, 0x8b, 0x28, 0xcf, 0x57, 0x1f, 0x2e, 0x7f, 0x63, 0x2d, 0xb2, 0x00, 0x7b, 0x9a,
	0x8b, 0x05, 0x98, 0x10, 0x75, 0x44, 0xb1, 0xc2, 0x97, 0xb3, 0x1c, 0xcf, 0xbd, 0x8f, 0x2e, 0x5d,
	0x2f, 0xc8, 0x8d, 0x46, 0x0c, 0xe7, 0xbd, 0x05, 0x2d, 0x87, 0xa2, 0xae, 0xc8, 0x6a, 0x3a, 0x73,
	0xf9, 0x82, 0x97, 0x98, 0xf9, 0x55, 0xcf, 0xc0, 0xf3, 0xf9, 0xc6, 0x1e, 0x6f, 0x62, 0x11, 0x21,
	0x66, 0x66, 0x32, 0xd7, 0xab, 0x53, 0x11, 0x23, 0x6e, 0x11, 0xfa, 0x68, 0x65, 0x65, 0x1d, 0xcd,
	0x36, 0x66, 0x26, 0x09, 0xa4, 0x48, 0x83, 0x8d, 0xe0, 0x43, 0x24, 0x54, 0x50, 0x67, 0xae, 0x5e,
	0xde, 0x72, 0x85, 0x60, 0xf9, 0xf5, 0x60, 0x3d, 0x7f, 0xb4, 0x96, 0x83, 0x8c, 0x2d, 0x66, 0xc8,
	0x7f, 0x25, 0x20, 0xcf, 0x9d, 0xee, 0xc6, 0xf7, 0x27, 0x90, 0x21, 0xe2, 0x62, 0x76, 0xc3, 0x73,
	0x6b, 0xf9, 0x71, 0xc4, 0xbc, 0x46, 0x0c, 0x7b, 0x2a, 0xe8, 0xab, 0xd5, 0x01, 0x2f, 0x42, 0xef,
	0xd9, 0x35, 0x02, 0x5e, 0x58, 0xb7, 0x32, 0xe2, 0x1b, 0x22, 0x33, 0x55, 0x43, 0x9b, 0x79, 0x11,
	0xf8, 0xe0, 0xca, 0x8f, 0x1c, 0xf6, 0xc4, 0x27, 0xae, 0x0c, 0x7d, 0xbe, 0xe0, 0xd7, 0xe4, 0x25,
	0xb1, 0x72, 0x01, 0x4f, 0x2c, 0x3a, 0x96, 0xc2, 0xdd, 0x05, 0xc7, 0x46, 0xdf, 0x2f, 0xa9, 0xeb,
	0xbd, 0x5f, 0x1a, 0x31, 0xf1, 0x82, 0x39, 0xbd, 0x70, 0xb4, 0x06, 0x90, 0xb5, 0x5d, 0x83, 0x1e,
	0xbe, 0x0f, 0x19, 0x97, 0xb5, 0x51, 0x06, 0x12, 0x35, 0xa5, 0x2e, 0x3e, 0x13, 0x14, 0xd6, 0x92,
	0x98, 0xe8, 0x40, 0xa9, 0x8b, 0xbf, 0x04, 0x85, 0xb5, 0x12, 0x0f, 0x31, 0xff, 0x93, 0x09, 0xea,
	0x5d, 0x94, 0x87, 0x4c, 0xaf, 0xb5, 0xdf, 0x6a, 0x1f, 0xb5, 0x4a, 0x31, 0xf1, 0x05, 0xc4, 0xff,
	0x71, 0x98, 0x0a, 0xff, 0xdd, 0x89, 0x87, 0x7e, 0x77, 0x12, 0xc1, 0x1f, 0x51, 0x52, 0x4c, 0x50,
	0x70, 0x29, 0x35, 0x48, 0xf3, 0x3f, 0xbe, 0xa7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xc8,
	0xeb, 0x6e, 0x26, 0x14, 0x00, 0x00,
}
